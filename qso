#!/usr/bin/python3

import atexit
import datetime
import psycopg2
import psycopg2.extras
import re
import readline
import sys

from pyhamtools import LookupLib, Callinfo

# readline

histfile = '.qso.history'
try:
    readline.read_history_file(histfile)
    # default history len is -1 (infinite), which may grow unruly
    readline.set_history_length(1000)
except FileNotFoundError:
    pass

atexit.register(readline.write_history_file, histfile)

# PG

conn = psycopg2.connect("service=cb")
cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

date = datetime.datetime.now().strftime("%Y-%m-%d")
mode = 'CW'
rsttx = '599'
auto_rst = None
mycall = 'DF7CB'

contest = None
if len(sys.argv) == 2:
    contest = sys.argv[1]
    print("Contest: %s" % contest)

select = """SELECT * FROM (
  SELECT start::timestamp, call, mode, qrg, qsltx, qslrx, name, qth, loc, contest, comment, info
  FROM log
  WHERE call ~ %s OR name ~* %s OR loc ~* %s
  ORDER BY start DESC, call DESC LIMIT 50
) sub
ORDER BY start, call"""

while True:
    log = {
        'mode': mode,
    }
    if contest:
        log['contest'] = contest
    if mycall:
        log['mycall'] = mycall

    try:
        prompt = "%s %s %s> " % (mycall, date, mode)
        line = input(prompt)
    except (EOFError, KeyboardInterrupt):
        print()
        exit()

    for tok in line.split(" "):
        # mode
        if tok.upper() in ('CW', 'FM', 'FT8', 'PSK31', 'RTTY', 'SSB'):
            mode = tok.upper()
            log['mode'] = mode
        # date and time
        elif re.search('^\d{4}-\d{2}-\d{2}$', tok):
            date = tok
        elif re.search('^\d{1,2}:\d{2}$', tok):
            log['start'] = "%s %s" % (date, tok)
        elif re.search('^(\d{1,2}:\d{2})-(\d{1,2}:\d{2})$', tok):
            match = re.search('^(\d{1,2}:\d{2})-(\d{1,2}:\d{2})$', tok)
            log['start'] = "%s %s" % (date, match.group(1))
            log['stop'] = "%s %s" % (date, match.group(2))

        # QRG
        elif tok == "db0mg":
            log['qrg'] = "145.6125"
            log['qso_via'] = "DB0MG"
            log['mode'] = 'FM'
        elif tok == "db0ca":
            log['qrg'] = "438.975"
            log['qso_via'] = "DB0CA"
            log['mode'] = 'FM'
            log['mypwr'] = '40'

        elif tok == "qo100":
            # get frequency from sdrangel
            import requests
            api = "http://127.0.0.1:8091/sdrangel/deviceset"
            device = requests.get(api + "/1/device/settings").json()
            channel = requests.get(api + "/1/channel/0/settings").json()
            qrg = device['limeSdrOutputSettings']['centerFrequency'] + \
                  channel['SSBModSettings']['inputFrequencyOffset']
            if log['mode'] == 'CW':
                  qrg += channel['SSBModSettings']['toneFrequency']
            log['qrg'] = round(qrg / 1000000.0, 4)
            log['qso_via'] = "QO100"

        elif re.search('^\d+(\.\d+)?$', tok):
            log['qrg'] = tok
            if int(float(tok)) == 2400:
                log['qso_via'] = "QO100"

        # RST handling
        elif re.search('^([45].*)/([45].*)$', tok):
            match = re.search('^([45].*)/([45].*)$', tok)
            log['rsttx'] = match.group(1)
            log['rstrx'] = match.group(2)
        elif re.search('^[45]\d', tok):
            log['rstrx'] = tok.upper()
        elif tok == "+":
            rsttx = str(int(rsttx) + 1)
            log['rsttx'] = rsttx
        elif tok == "-":
            rsttx = str(int(rsttx) - 1)
            log['rsttx'] = rsttx
        elif tok in ("serial", "ituz", "cqz"):
            auto_rst = tok
            if tok == "serial":
                rsttx = "599001"
            else:
                my_lookuplib = LookupLib(lookuptype="countryfile", filename="cty.plist")
                cic = Callinfo(my_lookuplib)

        # QSL sent/received handling
        elif re.search('^[nNyYrR]{1,2}$', tok):
            log['qsltx'] = tok.upper()[0]
            if len(tok) > 1:
                log['qslrx'] = tok.upper()[1]

        # mycall
        elif re.search('^/([mMpP])$', tok):
            match = re.search('^/([mMpP])$', tok)
            mycall = 'DF7CB/' + match.group(1).upper()
            log['mycall'] = mycall

        # mypwr
        elif re.search('^(\d+)[wW]$', tok):
            match = re.search('^(\d+)[wW]$', tok)
            log['mypwr'] = int(match.group(1))

        # generic fields
        elif re.search('^(.+?):(.*)', tok):
            match = re.search('^(.+?):(.*)', tok)
            log[match.group(1)] = match.group(2).replace('_', ' ')

        elif len(tok) > 0:
            log['call'] = tok.upper()

    if 'start' in log and 'call' in log:
        if auto_rst in ('ituz', 'cqz') and not rstrx:
            try:
                info = cic.get_all(call)
                rstrx = '599' + str(info[auto_rst]).zfill(2)
            except KeyError:
                pass

        if 'qrg' not in log:
            # get frequency from rigctld
            import Hamlib
            Hamlib.rig_set_debug(Hamlib.RIG_DEBUG_NONE)
            my_rig = Hamlib.Rig(Hamlib.RIG_MODEL_NETRIGCTL)
            my_rig.open()
            log['qrg'] = round(my_rig.get_freq() / 1000000.0, 4)

        print(log)
        insert = "INSERT INTO log (" + \
            ', '.join(log.keys()) + \
            ') VALUES (' + \
            ', '.join(['%s' for x in log]) + \
            ')'
        args = [x for x in log.values()]
        try:
            cur.execute(insert, args)
            conn.commit()
        except Exception as e:
            print("ERROR: ", e)
            conn.rollback()

        if auto_rst == "serial":
            rsttx = str(int(rsttx) + 1)

    elif 'call' in log:
        cur.execute(select, (log['call'], log['call'], log['call']))
        for rec in cur.fetchall():
            print("%s \033[1m%s %s %s\033[0m %s/%s %s" %
                    (rec['start'], rec['call'], rec['qrg'], rec['mode'],
                    rec['qsltx'], rec['qslrx'],
                    ' '.join(filter(None, [
                        rec['name'],
                        rec['qth'],
                        rec['loc'],
                        rec['contest'],
                        rec['comment'],
                        str(rec['info'])
                    ]))))
