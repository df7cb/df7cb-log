#!/usr/bin/python3

import atexit
from datetime import datetime, timezone
import Hamlib
import psycopg2
import psycopg2.extras
import re
import readline
import requests
import sys
from pyhamtools import LookupLib, Callinfo, frequency

# readline

histfile = '.qso.history'
try:
    readline.read_history_file(histfile)
    # default history len is -1 (infinite), which may grow unruly
    readline.set_history_length(1000)
except FileNotFoundError:
    pass

atexit.register(readline.write_history_file, histfile)

def completion(text, state):
    if text == '':
        if state == 0:
            return datetime.now(timezone.utc).strftime("%H:%M")
        else:
            return None
    else:
        return None
readline.set_completer(completion)

# PG

conn = psycopg2.connect("service=cb")
cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
rsttx = '599'
auto_rst = None
mycall = 'DF7CB'

# Hamlib
Hamlib.rig_set_debug(Hamlib.RIG_DEBUG_NONE)
my_rig = Hamlib.Rig(Hamlib.RIG_MODEL_NETRIGCTL)
my_rig.open()

my_rot = Hamlib.Rot(Hamlib.ROT_MODEL_NETROTCTL)
my_rot.set_conf("rot_pathname", "192.168.0.3")
#my_rot.open()

# arguments
contest = None
if len(sys.argv) == 2:
    contest = sys.argv[1]
    print("Contest: %s" % contest)

select = """SELECT * FROM (
  SELECT mycall, start::timestamp, call, mode, qrg, qsltx, qslrx, lotw, name, qth, loc, contest, comment, info
  FROM log
  WHERE call ~ %s OR name ~* %s OR qth ~* %s OR loc ~* %s
  ORDER BY start DESC, call DESC LIMIT 50
) sub
ORDER BY start, call"""

while True:
    log = {}
    if contest:
        log['contest'] = contest
    if mycall:
        log['mycall'] = mycall

    try:
        prompt = "%s %s> " % (mycall, date)
        line = input(prompt)
    except (EOFError, KeyboardInterrupt):
        print()
        exit()

    for tok in line.split(" "):
        # mode
        if tok.upper() in ('CW', 'FM', 'FT8', 'PSK31', 'RTTY', 'SSB', 'SSTV'):
            log['mode'] = tok.upper()
        # date and time
        elif re.search('^\d{4}-\d{2}-\d{2}$', tok):
            date = tok
        elif re.search('^\d{1,2}:\d{2}$', tok):
            log['start'] = "%s %s" % (date, tok)
        elif re.search('^(\d{1,2}:\d{2})-(\d{1,2}:\d{2})$', tok):
            match = re.search('^(\d{1,2}:\d{2})-(\d{1,2}:\d{2})$', tok)
            log['start'] = "%s %s" % (date, match.group(1))
            log['stop'] = "%s %s" % (date, match.group(2))

        # locator
        elif re.match(r'^[A-R][A-R][0-9][0-9](?:[A-X][A-X](?:[0-9][0-9](?:[A-X][A-X])?)?)?$', tok, re.I):
            log['loc'] = tok.upper()

        # QRG
        elif tok == "db0mg":
            log['qrg'] = "145.6125"
            log['qso_via'] = "DB0MG"
            log['mode'] = 'FM'
        elif tok == "db0ca":
            log['qrg'] = "438.975"
            log['qso_via'] = "DB0CA"
            log['mode'] = 'FM'
            log['mypwr'] = '40'

        elif tok == "qo100":
            # get frequency from sdrangel
            #import requests
            #api = "http://127.0.0.1:8091/sdrangel/deviceset"
            #device = requests.get(api + "/1/device/settings").json()
            #channel = requests.get(api + "/1/channel/0/settings").json()
            #qrg = device['limeSdrOutputSettings']['centerFrequency'] + \
            #      channel['SSBModSettings']['inputFrequencyOffset']
            #if log['mode'] == 'CW':
            #      qrg += channel['SSBModSettings']['toneFrequency']

            # get frequency from rigctld on port 4534
            Hamlib.rig_set_debug(Hamlib.RIG_DEBUG_NONE)
            qo100_rig = Hamlib.Rig(Hamlib.RIG_MODEL_NETRIGCTL)
            qo100_rig.set_conf("rig_pathname", "localhost:4534")
            qo100_rig.open()
            freq = qo100_rig.get_freq()
            if log['mode'] == 'CW':
                freq += 850
            log['qrg'] = round(freq / 1000000.0, 4)

            log['qso_via'] = "QO100"

        elif re.search('^\d+(\.\d+)?$', tok): # frequency in MHz
            log['qrg'] = tok
            freq = float(tok)
            if int(freq) == 2400:
                log['qso_via'] = "QO100"
            elif freq >= 1000: # guess it's kHz
                freq /= 1000.0
                log['qrg'] = freq

        # RST handling
        elif re.search('^([45].*)/([45].*)$', tok):
            match = re.search('^([45].*)/([45].*)$', tok)
            log['rsttx'] = match.group(1)
            log['rstrx'] = match.group(2)
        elif re.search('^[45]\d', tok):
            log['rstrx'] = tok.upper()
        elif tok == "+":
            rsttx = str(int(rsttx) + 1)
            log['rsttx'] = rsttx
        elif tok == "-":
            rsttx = str(int(rsttx) - 1)
            log['rsttx'] = rsttx
        elif tok in ("serial", "ituz", "cqz"):
            auto_rst = tok
            if tok == "serial":
                rsttx = "599001"
            else:
                my_lookuplib = LookupLib(lookuptype="countryfile", filename="cty.plist")
                cic = Callinfo(my_lookuplib)

        # QSL sent/received handling
        elif re.search('^[nNyYrR]{1,2}$', tok):
            log['qsltx'] = tok.upper()[0]
            if len(tok) > 1:
                log['qslrx'] = tok.upper()[1]

        # mycall
        elif re.search('^/([mMpP])$', tok):
            match = re.search('^/([mMpP])$', tok)
            mycall = 'DF7CB/' + match.group(1).upper()
            log['mycall'] = mycall

        # mypwr
        elif re.search('^(\d+)[wW]$', tok):
            match = re.search('^(\d+)[wW]$', tok)
            log['mypwr'] = int(match.group(1))

        # rotator control
        elif match := re.search('^(\d+)Â°$', tok):
            my_rot.set_position(int(match.group(1)), 0)

        # generic fields
        elif m := re.search('^(.+?):(.*)', tok):
            field, value = m.groups()
            if field == 'op': field = 'name'
            if field in ('call'): value = value.upper()
            if field in ('name', 'qth') and value == value.lower(): value = value.title()
            log[field] = value.replace('_', ' ')

        elif len(tok) > 0:
            log['call'] = tok.upper()

    if 'start' in log and 'call' in log:
        if auto_rst in ('ituz', 'cqz') and not rstrx:
            try:
                info = cic.get_all(call)
                rstrx = '599' + str(info[auto_rst]).zfill(2)
            except KeyError:
                pass

        if 'qrg' not in log:
            # get frequency from rigctld
            log['qrg'] = round(my_rig.get_freq() / 1000000.0, 4)

        if 'mode' not in log:
            # get frequency from rigctld
            (mode_num, bandwidth) = my_rig.get_mode()
            mode = Hamlib.rig_strrmode(mode_num)
            if mode in ('USB', 'LSB'):
                mode = 'SSB'
            log['mode'] = mode

        if log['mode'] in ('CW', 'RTTY'):
            if 'rsttx' not in log:
                log['rsttx'] = '599'
            if 'rstrx' not in log:
                log['rstrx'] = '599'
        elif log['mode'] in ('SSB', 'FM'):
            if 'rsttx' not in log:
                log['rsttx'] = '59'
            if 'rstrx' not in log:
                log['rstrx'] = '59'

        if 'qsltx' not in log:
            log['qsltx'] = 'N'
        if 'qslrx' not in log:
            log['qslrx'] = 'N'

        # store in database
        print(log)
        insert = "INSERT INTO log (" + \
            ', '.join(log.keys()) + \
            ') VALUES (' + \
            ', '.join(['%s' for x in log]) + \
            ')'
        args = [x for x in log.values()]
        try:
            cur.execute(insert, args)
            conn.commit()
        except Exception as e:
            print("ERROR: ", e)
            conn.rollback()
            continue

        # submit spot
        #info = log['mode']
        #if my_rig.get_func(Hamlib.RIG_FUNC_XIT):
        #    xit = my_rig.get_xit()
        #    if xit >= 500:
        #        info += " up " + str(round(xit/1000, 1))
        #data = {
        #        'de_call': "DF7CB",
        #        'dx_call': log['call'],
        #        'frequency': round(float(log['qrg']) * 1000.0, 1),
        #        'info': info,
        #       }
        #try:
        #    print(f"Submitting to dxsummit.fi: {info} ... ", end='')
        #    request = requests.post("http://www.dxsummit.fi/api/v1/spots",
        #                            json=data)
        #    print(request.text)
        #    request.raise_for_status()
        #except Exception as e:
        #    print(e)
        #    pass

        if auto_rst == "serial":
            rsttx = str(int(rsttx) + 1)

    elif 'call' in log or 'loc' in log:
        cur.execute(select, (log.get('call'), log.get('call'), log.get('call'), log.get('loc')))
        for rec in cur.fetchall():
            print("\033[1m%s\033[0m %s \033[1m%s %s %s\033[0m %s/%s/%s %s" %
                    (rec['mycall'], rec['start'], rec['call'], rec['qrg'], rec['mode'],
                    rec['qsltx'], rec['qslrx'], rec['lotw'],
                    ' '.join(filter(None, [
                        rec['name'],
                        rec['qth'],
                        rec['loc'],
                        rec['contest'],
                        rec['comment'],
                        str(rec['info'])
                    ]))))

    elif 'qrg' in log:
        # set frequency and mode in rigctld
        freq = int(float(log['qrg']) * 1000000)
        my_rig.set_freq(Hamlib.RIG_VFO_CURR, freq)
        band_mode = frequency.freq_to_band(freq/1000)
        if band_mode['mode'] == None:
            continue
        if band_mode['mode'] == 'DIGITAL':
            mode_num = Hamlib.RIG_MODE_PKTUSB
        else:
            mode_num = Hamlib.rig_parse_mode(band_mode['mode'])
        my_rig.set_mode(mode_num)
