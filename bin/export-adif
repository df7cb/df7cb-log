#!/usr/bin/python3

import argparse
import os
import adif_export
import psycopg
from psycopg.rows import dict_row

argparser = argparse.ArgumentParser(description="Export an ADIF log from PostgreSQL")
argparser.add_argument("-c", "--contest")
argparser.add_argument("-l", "--myloc")
argparser.add_argument("-m", "--mycall")
argparser.add_argument("-q", "--qsl", action=argparse.BooleanOptionalAction)
argparser.add_argument("-s", "--since",
                       help="QSO since (or changed since) this timestamp")
argparser.add_argument("-t", "--table", default='adif')
argparser.add_argument("logfile", help="logfile")
args, more_args = argparser.parse_known_args()

conn = psycopg.connect("service=cb")
cur = conn.cursor(row_factory=dict_row)

pred, vals = ['true'], []

if args.contest:
    pred.append("contest_id = %s")
    vals.append(args.contest)
if args.myloc:
    pred.append("my_gridsquare = %s")
    vals.append(args.myloc.upper())
if args.mycall:
    pred.append("station_callsign = %s")
    vals.append(args.mycall.upper())
if args.qsl:
    # send QSL for this QSO if
    # 1) we wanted to (qsltx R) or
    # 2) we are requesting a QSL from them for some other QSO already (qslrx R)
    pred.append("qsl_sent = 'R' or call in (select distinct call from log where mycall = %s and qsltx = 'R' and qslrx = 'R')")
    vals.append(args.mycall.upper())
    # exclude fully confirmed QSOs
    pred.append("not (qsl_sent = 'Y' and qsl_rcvd = 'Y')")
if args.since:
    pred.append("last_update >= %s")
    vals.append(args.since)
for arg in more_args:
    assert arg[0:2] == '--'
    key, _, value = arg[2:].partition('=')
    pred.append(f"{key} = %s")
    vals.append(value)

query = f"""select * from {args.table}
        where {' and '.join(pred)}
        order by call, start"""

cur.execute(query, vals)
records = cur.fetchall()
for r in records:
    del r['start']
    del r['last_update']
adif_export.write(records, args.logfile)

print(f"{cur.rowcount} QSO written to {args.logfile}")
