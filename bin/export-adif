#!/usr/bin/python3

import os
import adif
import psycopg2
import psycopg2.extras
import sys

adiffile = sys.argv[1]
if len(sys.argv) > 2:
    since = sys.argv[2]
else:
    since = "yesterday"
if len(sys.argv) > 3:
    extra = sys.argv[3]
else:
    #extra = "mycall COLLATE \"C\" LIKE 'DF7CB%%'"
    extra = "true"

conn = psycopg2.connect("service=cb")
cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

cur.execute(f"""SELECT
        to_char(start, 'YYYYMMDD') AS "QSO_DATE",
        to_char(start, 'hh24mi') AS "TIME_ON",
        call AS "CALL",
        qrg::text AS "FREQ",
        qrg::band AS "BAND",
        case mode
          when 'FSQ' then 'MFSK'
          when 'FST4' then 'MFSK'
          when 'FT4' then 'MFSK'
          else mode
        end AS "MODE",
        case mode
          when 'FSQ' then 'FSQCALL'
          when 'FST4' then 'FST4'
          when 'FT4' then 'FT4'
          else ''
        end AS "SUBMODE",

        CASE qso_via
          WHEN 'QO100' THEN 'SAT'
          ELSE ''
        END AS "PROP_MODE",
        CASE qso_via
          WHEN 'QO100' THEN 'QO-100'
          ELSE ''
        END AS "SAT_NAME",
        CASE qso_via
          WHEN 'QO100' THEN '3cm'
          ELSE ''
        END AS "BAND_RX",

        coalesce(regexp_replace(rsttx, '^599(.)', '599 \\1'), '') AS "RST_SENT",
        coalesce(extx, '') as "STX_STRING",
        coalesce(regexp_replace(rstrx, '^599(.)', '599 \\1'), '') AS "RST_RCVD",
        coalesce(exrx, '') as "SRX_STRING",

        coalesce(qsltx, 'N') AS "QSL_SENT",
        case qslrx
          when 'Y' then 'Y' -- TNX
          when 'R' then 'R' -- PSE
          else 'i' -- N means PSE at qslshop.de
        end as "QSL_RCVD",
        coalesce(loc, '') AS "GRIDSQUARE",
        coalesce(contest, '') AS "CONTEST_ID",

        mycall AS "STATION_CALLSIGN",
        case mycall when 'DF7CB' then '' else 'DF7CB' end as "OPERATOR",
        coalesce(mypwr::text, '') AS "TX_PWR",
        coalesce(myloc, '') AS "MY_GRIDSQUARE"
        FROM log l
        WHERE coalesce(last_update, start) >= %s
            AND {extra}
        ORDER BY start, call""", [since])

records = cur.fetchall()
adif = adif.ADIF()
adif.write(records, adiffile)

# Remove timestamp from header to make output reproducible
os.system("sed -i -e 's/ Generated on .*//' %s" % adiffile)
