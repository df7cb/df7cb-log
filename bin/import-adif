#!/usr/bin/python3

import adif_io
import argparse
import psycopg2, psycopg2.extras
import re

argparser = argparse.ArgumentParser(description="Import an ADIF log into PostgreSQL")
argparser.add_argument("-l", "--livelog",
                       action=argparse.BooleanOptionalAction,
                       help="import into livelog table")
argparser.add_argument("logfile", help="logfile")
argparser.add_argument("contest", nargs='?', help="contest")
argparser.add_argument("extx", nargs='?', help="exchange sent by us")
args = argparser.parse_args()

adiflog, header = adif_io.read_from_file(args.logfile)
#if len(argv) > 2:
#    contest = argv[2]
#if len(argv) > 3:
#    extx = argv[3]

# fldigi:
# {'FREQ': '14.069245', 'CALL': 'R3WA', 'MODE': 'PSK63', 'QSO_DATE': '20200315', 'TIME_OFF': '114608', 'TIME_ON': '114500', 'RST_RCVD': '238', 'RST_SENT': '238', 'BAND': '20m', 'COUNTRY': 'European Russia', 'CQZ': '16', 'SRX': '239', 'STX': '000'}
# <FREQ:9>14.071636<CALL:6>EA3FYO<MODE:5>PSK31<NAME:4>Joan<QSO_DATE:8>20200912<QSO_DATE_OFF:8>20200912<TIME_OFF:6>092315<TIME_ON:6>091900<QTH:6>Besora<RST_RCVD:3>599<RST_SENT:3>599<GRIDSQUARE:6>JN12CC<BAND:3>20m<COUNTRY:5>Spain<CQZ:2>14<STX:3>000<OPERATOR:5>DF7CB<STATION_CALLSIGN:5>DF7CB<MY_GRIDSQUARE:6>JO31hi<MY_CITY:7>Krefeld<EOR>
# <FREQ:9>14.117493<CALL:6>VE2RYY<MODE:4>RTTY<QSO_DATE:8>20210925<QSO_DATE_OFF:8>20210925<TIME_OFF:6>205327<TIME_ON:6>205300<RST_RCVD:3>599<RST_SENT:3>599<STATE:2>QC<BAND:3>20m<COUNTRY:6>Canada<CQZ:1>5<STX:3>001<STX_STRING:2>14<STATION_CALLSIGN:5>DF7CB<MY_GRIDSQUARE:6>JO31hi<MY_CITY:7>Krefeld<EOR>
# wsjtx:
# <call:6>DF4IAE <gridsquare:4>JN49 <mode:3>FT8 <rst_sent:3>+07 <rst_rcvd:3>-16 <qso_date:8>20220713 <time_on:6>194930 <qso_date_off:8>20220713 <time_off:6>195030 <band:4>70cm <freq:10>432.175814 <station_callsign:5>DN3AJ <my_gridsquare:6>JN39PF <tx_pwr:1>5 <comment:6>IC-705 <eor>

log = []

for qso in adiflog:
    rec = {}
    rec['start'] = "%s %s" % (qso['QSO_DATE'], qso['TIME_ON'])
    rec['stop'] = "%s %s" % (qso['QSO_DATE'], qso['TIME_OFF'])
    rec['call'] = qso['CALL']
    rec['mode'] = qso['MODE']
    rec['qrg'] = qso['FREQ']

    if args.contest:
        rec['contest'] = args.contest
    elif 'CONTEST_ID' in qso:
        rec['contest'] = qso['CONTEST_ID']

    rec['rsttx'] = qso['RST_SENT']
    if args.extx:
        rec['extx'] = args.extx
    elif 'STX' in qso:
        rec['extx'] = qso['STX']
    elif 'STX_STRING' in qso:
        rec['extx'] = qso['STX_STRING']

    rec['rstrx'] = qso['RST_RCVD']
    if 'SRX_STRING' in qso:
        rec['exrx'] = qso['SRX_STRING']
        if m := re.search(r'\b([A-R][A-R][0-9][0-9](?:[A-Xa-x][A-Xa-x])?)\b', qso['SRX_STRING']):
            rec['loc'] = m.group(1)
    elif 'SRX' in qso:
        rec['exrx'] = qso['SRX']

    #if 'STATE' in qso:
    #    rec['rstrx'] = "%s%02d%s" % ("599", int(qso['CQZ']), qso['STATE'])
    #else:
    #    rec['rstrx'] = "%s%02d" % ("599", int(qso['CQZ']))

    if 'NAME' in qso:
        rec['name'] = qso['NAME']
    if 'QTH' in qso:
        rec['qth'] = qso['QTH']
    for key in ['name', 'qth']: # Title Case These Keys
        if key in rec and re.match('[A-Z ]*$', rec[key]):
            rec[key] = rec[key].title()
    if 'GRIDSQUARE' in qso:
        rec['loc'] = qso['GRIDSQUARE'].upper()
    if 'CQZ' in qso:
        rec['cq'] = qso['CQZ']
    if 'STATE' in qso:
        if 'info' not in rec: rec['info'] = {}
        rec['info']['state'] = qso['STATE']

    if 'STATION_CALLSIGN' in qso:
        rec['mycall'] = qso['STATION_CALLSIGN']
    if 'MY_CITY' in qso:
        rec['myqth'] = qso['MY_CITY']
    if 'MY_GRIDSQUARE' in qso:
        rec['myloc'] = qso['MY_GRIDSQUARE']
    if 'TX_PWR' in qso:
        rec['mypwr'] = qso['TX_PWR']

    log.append(rec)
    print(rec)

input("Continue? ")

psycopg2.extensions.register_adapter(dict, psycopg2.extras.Json) # allow inserting dicts as jsonb
conn = psycopg2.connect("service=cb")
cur = conn.cursor()

cur.execute(f"TRUNCATE livelog")
if args.livelog:
    logtable = "livelog"
else:
    logtable = "log2"
    cur.execute(f"TRUNCATE log2")

for rec in log:
    insert = f"INSERT INTO {logtable} (" + \
        ', '.join(rec.keys()) + \
        ') VALUES (' + \
        ', '.join(['%s' for x in rec]) + \
        ')'
    params = [x for x in rec.values()]
    cur.execute(insert, params)

if not args.livelog:
    cur.execute("""INSERT INTO log
        SELECT * FROM log2 WHERE NOT EXISTS
            (SELECT * FROM log WHERE log2.start = log.start and log2.call = log.call)""")
    print(cur.rowcount, "new QSOs")

conn.commit()
