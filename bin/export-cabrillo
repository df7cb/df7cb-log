#!/usr/bin/python3

# usage: export-cabrillo <contest name> [<filename>]

import argparse
import psycopg2
import psycopg2.extras
import sys

argparser = argparse.ArgumentParser(description="Export a Cabrillo log from PostgreSQL")
argparser.add_argument("-a", "--assisted")
argparser.add_argument("-u", "--unassisted")
argparser.add_argument("-s", "--since",
                       help="QSO since this timestamp")
argparser.add_argument("contest", help="Contest name")
argparser.add_argument("filename", nargs='?')
args = argparser.parse_args()

assisted = 'NON-ASSISTED' if args.unassisted else 'ASSISTED'
soapbox = []
claimed_score = None

conn = psycopg2.connect("service=cb")
cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

pred = ['contest = %s']
vals = [args.contest]
if args.since:
    pred.append('start >= %s')
    vals.append(args.since)
else:
    pred.append('start >= now() - %s::interval')
    vals.append('5 days')

cur.execute(f"""select
    min(start) start,
    to_char(min(start::date), 'YYYY-MM-DD') iso_date,
    array_agg(distinct upper(qrg::band::text)) band,
    array_agg(distinct mode) mode,

    max(mycall::text) mycall,
    max(myloc) myloc,
    max(mypwr) mypwr
    from log
    where {' and '.join(pred)}
    """,
    vals)

info = cur.fetchall()[0]

cur.execute(f"""select
    round(qrg * 1000.0)::text qrg,
    to_char(start, 'YYYY-MM-DD') as date,
    to_char(start, 'hh24mi') as time,
    call as call,
    case
      when mode in ('CW', 'FM') then mode
      when mode in ('RTTY') then 'RY'
      when mode in ('SSB') then 'PH'
      when mode ~ 'PSK' then 'PS'
      else 'DG'
    end as mode,
    concat_ws(' ',
      regexp_replace(rsttx, '^(5[1-9]9?)(..)', '\\1 \\2'),
      extx) as rst_sent,
    concat_ws(' ',
      regexp_replace(rstrx, '^(5[1-9]9?)(..)', '\\1 \\2'),
      exrx) as rst_rcvd
    from log
    where {' and '.join(pred)}
    order by start, extx, call""",
    vals)

records = cur.fetchall()
if len(records) == 0:
    print("No QSOs found")
    exit(1)

if args.contest == 'MWC':
    cur.execute("""
        with raw as (select qrg::band::text, count(distinct call) qso, count(distinct mwc_multi(call)) multi
            from log where start >= %s and contest = %s group by qrg::band order by qrg::band desc)
        select * from raw union all
        select 'Sum', sum(qso), sum(multi) from raw union all
        select 'Score', null, sum(qso) * sum(multi) score from raw;
        """, [info['start'], args.contest])

    for row in cur.fetchall():
        row = [field or '' for field in row]
        soapbox.append(f"{row[0]:5} {row[1]:5} {row[2]:5}")

    claimed_score = row[-1]

elif args.contest == 'CWT':
    cur.execute("""
        with qso as (select qrg::band::text, count(distinct call) qso
            from log where start >= %s and contest = %s group by qrg::band order by qrg::band desc),
        multi as (select count(distinct call) multi
            from log where start >= %s and contest = %s)
        select * from qso union all
        select 'QSO', sum(qso) from qso union all
        select 'Multi', multi from multi union all
        select 'Score', sum(qso) * multi from qso, multi group by multi;
        """, [info['start'], args.contest, info['start'], args.contest])

    for row in cur.fetchall():
        soapbox.append(f"{row[0]:5} {row[1]:5}")

    claimed_score = row[-1]

# write output

if not args.filename:
    args.filename = f"{info['iso_date']}-{args.contest.lower().translate({32: 95})}-{info['mycall'].lower().translate({47: 45})}.cbr"
print(f"Writing {args.filename}")
f = open(args.filename, 'w')

if info['mypwr'] is not None and info['mypwr'] <= 10:
    mypwr = 'QRP'
elif info['mypwr'] is None or info['mypwr'] <= 100:
    mypwr = 'LOW'
else:
    mypwr = 'HIGH'

f.write(f"""START-OF-LOG: 3.0
CONTEST: {args.contest}
CALLSIGN: {info['mycall']}
OPERATORS: DF7CB
NAME: Christoph Berg
EMAIL: cb@df7cb.de
ADDRESS: Rather Str. 76a
ADDRESS: 47802 Krefeld
ADDRESS: Germany
GRID-LOCATOR: {info['myloc']}
LOCATION: DX
CLUB: Rhein Ruhr DX Association
CATEGORY-ASSISTED: {assisted}
CATEGORY-BAND: {info['band'][0] if len(info['band']) == 1 else 'ALL'}
CATEGORY-MODE: {info['mode'][0] if len(info['mode']) == 1 else 'MIXED'}
CATEGORY-OPERATOR: SINGLE-OP
CATEGORY-POWER: {mypwr}
CATEGORY-STATION: FIXED
CATEGORY-TRANSMITTER: ONE
""")

for row in soapbox:
    f.write(f"SOAPBOX: {row}\n")

if claimed_score:
    f.write(f"CLAIMED-SCORE: {claimed_score}\n")

# QSO: 7036 CW 2022-06-27 1639 DF7CB 599 001 SD6M 599 014 0

call_len = 0
rst_rcvd_len = 0

for qso in records:
    if len(qso['call']) > call_len:
        call_len = len(qso['call'])
    if len(qso['rst_rcvd']) > rst_rcvd_len:
        rst_rcvd_len = len(qso['rst_rcvd'])

for qso in records:
    f.write('QSO: ' + ' '.join([
        qso['qrg'].ljust(5),
        qso['mode'],
        qso['date'],
        qso['time'],
        info['mycall'],
        qso['rst_sent'],
        qso['call'].ljust(call_len),
        qso['rst_rcvd'].ljust(rst_rcvd_len),
        '0', # transmitter number
        ]) + '\n')

f.write(f"""END-OF-LOG:\n""")
