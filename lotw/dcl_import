#!/usr/bin/python3

import adif_io
import json
import psycopg2

dcl, header = adif_io.read_from_file('dcl.adif')

# {'CALL': 'DL7ET', 'BAND': '80m', 'MODE': 'CW', 'QSO_DATE': '19951115', 'TIME_ON': '1932', 'RST_SENT': '599', 'RST_RCVD': '599', 'DXCC': '230', 'DARC_DOK': 'R09', 'APP_DCL_STATUS': 'i'}

conn = psycopg2.connect("service=cb")
cur = conn.cursor()

for qso in dcl:
    print(qso)

    if 'FREQ' in qso:
        freq = qso['FREQ']
    elif qso['BAND'] == '160m':
        freq = '1.8'
    elif qso['BAND'] == '80m':
        freq = '3.5'
    elif qso['BAND'] == '60m':
        freq = '5.3'
    elif qso['BAND'] == '40m':
        freq = '7'
    elif qso['BAND'] == '30m':
        freq = '10.1'
    elif qso['BAND'] == '20m':
        freq = '14'
    elif qso['BAND'] == '17m':
        freq = '18.1'
    elif qso['BAND'] == '15m':
        freq = '21'
    elif qso['BAND'] == '12m':
        freq = '24.8'
    elif qso['BAND'] == '10m':
        freq = '28'
    elif qso['BAND'] == '2m':
        freq = '144'
    elif qso['BAND'] == '70cm':
        freq = '430'

    cur.execute("""INSERT INTO dcl (start, call, qrg, mode, info)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (start, call) DO UPDATE
            SET qrg = EXCLUDED.qrg,
                mode = EXCLUDED.mode,
                info = EXCLUDED.info""",
            (adif_io.time_on(qso),
            qso.get('CALL'),
            freq,
            qso.get('MODE'),
            json.dumps(qso)))

conn.commit()

# DCL import
cur.execute("""UPDATE log l
  SET dcl = d.info->>'APP_DCL_STATUS'
  FROM dcl d
  WHERE (date_trunc('minute', l.start), l.call) = (d.start, d.call)
    AND l.dcl IS DISTINCT FROM d.info->>'APP_DCL_STATUS'""")
print("New DCL QSLs: %s" % cur.rowcount)

# DOK import
cur.execute("""UPDATE log l SET dok = d.info->>'DARC_DOK' FROM dcl d
  WHERE (date_trunc('minute', l.start), l.call) = (d.start, d.call)
    AND l.dok IS NULL AND d.info->>'DARC_DOK' <> ''""")
print("New DOKs: %s" % cur.rowcount)

# DOK mismatch
cur.execute("""SELECT l.start::text, l.call, l.qrg::text, l.mode, l.dok, d.info->>'DARC_DOK'
  FROM log l JOIN dcl d
    ON (date_trunc('minute', l.start), l.call) = (d.start, d.call)
  WHERE l.dok IS DISTINCT FROM d.info->>'DARC_DOK'
    AND d.info->>'DARC_DOK' <> ''
  ORDER BY start""")
for row in cur.fetchall():
    print("DOK mismatch:", row)

conn.commit()
