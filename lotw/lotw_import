#!/usr/bin/python3

import adif_io
import json
import psycopg2
import psycopg2.extras

lotw, header = adif_io.read_from_file('lotwreport.adi')

conn = psycopg2.connect("service=cb")
cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

# {'CALL': 'YB1BML', 'BAND': '30m', 'FREQ': '10.13828', 'MODE': 'FT8', 'QSO_DATE': '20190302', 'TIME_ON': '161500', 'QSL_RCVD': 'Y', 'DXCC': '327', 'COUNTRY': 'INDONESIA', 'IOTA': 'OC-021', 'GRIDSQUARE': 'OI33KO', 'CQZ': '28', 'ITUZ': '54'}

for qso in lotw:
    #print(qso)
    cur.execute("""INSERT INTO lotw (start, call, qrg, mode, country, loc, info)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (start, call) DO UPDATE
            SET qrg = EXCLUDED.qrg,
                mode = EXCLUDED.mode,
                country = EXCLUDED.country,
                loc = EXCLUDED.loc,
                info = EXCLUDED.info""",
            ("%s %s" % (qso['QSO_DATE'], qso['TIME_ON']),
            qso.get('CALL'),
            qso.get('FREQ'),
            qso.get('MODE'),
            qso.get('COUNTRY'),
            qso.get('GRIDSQUARE'),
            json.dumps(qso)))

conn.commit()

# LoTW QSL import
cur.execute("""UPDATE log l SET lotw = true
  FROM lotw w
  WHERE date_trunc('minute', l.start) = w.start and l.call = w.call
    AND l.lotw IS NULL""")
if cur.rowcount > 0:
    print("New LoTW QSLs: %s" % cur.rowcount)

# mycall differs from my callsign in the LoTW QSL
cur.execute("""UPDATE log l SET info = jsonb_set(coalesce(l.info, '{}'), '{lotw_mycall}', w.info->'STATION_CALLSIGN')
  FROM lotw w
  WHERE date_trunc('minute', l.start) = w.start and l.call = w.call
    AND l.mycall <> w.info->>'STATION_CALLSIGN'
    AND l.info->>'lotw_mycall' IS DISTINCT FROM w.info->>'STATION_CALLSIGN'""")

# locator import
cur.execute("""UPDATE log l SET loc = w.loc FROM lotw w
  WHERE date_trunc('minute', l.start) = w.start and l.call = w.call
    AND l.loc IS NULL AND w.loc IS NOT NULL""")
if cur.rowcount > 0:
    print("New locators: %s" % cur.rowcount)

cur.execute("""UPDATE log l SET loc = w.loc FROM lotw w
  WHERE date_trunc('minute', l.start) = w.start and l.call = w.call
    AND l.loc::varchar(4) = w.loc::varchar(4)
    AND l.loc <> w.loc""")
if cur.rowcount > 0:
    print("Updated locators: %s" % cur.rowcount)

cur.execute("""UPDATE log l SET info = jsonb_set(coalesce(l.info, '{}'), '{lotw_loc}', to_jsonb(w.loc)) FROM lotw w
  WHERE date_trunc('minute', l.start) = w.start and l.call = w.call
    AND l.loc::varchar(4) <> w.loc::varchar(4)
    AND l.info->>'lotw_loc' IS DISTINCT FROM w.loc""")
if cur.rowcount > 0:
    print("Updated locators: %s" % cur.rowcount)

# zone import:
cur.execute("""UPDATE log l SET cq = (w.info->>'CQZ')::smallint FROM lotw w
  WHERE date_trunc('minute', l.start) = w.start and l.call = w.call
    AND w.info ? 'CQZ' AND l.cq IS DISTINCT FROM (w.info->>'CQZ')::smallint""")

cur.execute("""UPDATE log l SET itu = (w.info->>'ITUZ')::smallint FROM lotw w
  WHERE date_trunc('minute', l.start) = w.start and l.call = w.call
    AND w.info ? 'ITUZ' AND l.itu IS DISTINCT FROM (w.info->>'ITUZ')::smallint""")

# state import:
cur.execute("""UPDATE log l SET state = w.info->>'STATE' FROM lotw w
  WHERE date_trunc('minute', l.start) = w.start and l.call = w.call
    AND w.info ? 'STATE' AND l.state IS DISTINCT FROM w.info->>'STATE'""")
if cur.rowcount > 0:
    print("Updated states: %s" % cur.rowcount)

# IOTA import:
cur.execute("""UPDATE log l SET iota = w.info->>'IOTA' FROM lotw w
  WHERE date_trunc('minute', l.start) = w.start and l.call = w.call
    AND w.info ? 'IOTA' AND l.iota IS DISTINCT FROM w.info->>'IOTA'""")
if cur.rowcount > 0:
    print("Updated IOTAs: %s" % cur.rowcount)

# orphaned LoTW QSLs
cur.execute("""SELECT * FROM log l RIGHT JOIN lotw w
        ON date_trunc('minute', l.start) = w.start and l.call = w.call
        WHERE l.start IS NULL""")
for row in cur.fetchall():
    print("Orphaned LoTW QSL:", row)

cty_mismatch = """
select l.call, l.cty, w.country, c.country, c.cty
  from log l
  join lotw w on date_trunc('minute', l.start) = w.start and l.call = w.call
  left join country c on w.country =
    case c.country
      when 'Fed. Rep. of Germany' then 'FEDERAL REPUBLIC OF GERMANY'
      when 'Macedonia' then 'NORTH MACEDONIA'
      when 'Sov Mil Order of Malta' then 'SOVEREIGN MILITARY ORDER OF MALTA'
      when 'South Africa' then 'REPUBLIC OF SOUTH AFRICA'
      when 'St. Lucia' then 'SAINT LUCIA'
      when 'Swaziland' then 'KINGDOM OF ESWATINI'
      when 'European Turkey' then 'TURKEY'
      when 'Asiatic Turkey' then 'TURKEY'
      when 'United States' then 'UNITED STATES OF AMERICA'
      else upper(c.country)
    end
  where l.cty is distinct from c.cty
  order by l.cty, l.call;
"""

conn.commit()
