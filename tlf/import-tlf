#!/usr/bin/python3

from decimal import Decimal
import getopt
import re
import sys
import psycopg

opts, args = getopt.getopt(sys.argv[1:], "c:e:lm:no:p:")
noop = False
extx = "#"
logtable = "log"
contest = args[0]

qso_template = {
        'contest': contest,
        }

for o, a in opts:
    if o == '-c':
        qso_template['comment'] = a
    elif o == '-e':
        extx = a
    elif o == '-l':
        logtable = "livelog"
    elif o == '-m':
        qso_template['mycall'] = a.upper()
    elif o == '-n':
        noop = True
    elif o == '-o':
        key, _, value = a.partition(':')
        qso_template[key] = value
    elif o == '-p':
        qso_template['mypwr'] = a
    else:
        assert False, "Unknown option %s" % (o)

if contest == 'CWT':
    extx = 'CHRIS 3484'

#40CW  14-Apr-19 08:11 0002  LY3B           599  599  29            LY   29  0   7029.1

log = []
laststart = ''
fields = set()
with open(args[1]) as f:
  for line in f:

    # ; comment, append to last qso
    if line[0] == ';':
        if line[2:6] == 'via ':
            log[-1]['qsl_via'] = line[6:].rstrip().upper()
        else:
            log[-1]['comment'] = line[2:].rstrip()
        continue

    qso = {x: qso_template[x] for x in qso_template}

    qso['mode'] = line[3:6].rstrip()
    if qso['mode'] == 'DIG': qso['mode'] = 'RTTY'
    qso['start'] = line[7:22] # date+time
    if laststart == qso['start']: # 2nd QSO in this minute
        qso['start'] += ':15'
    elif laststart == qso['start'] + ':15': # 3rd QSO in this minute
        qso['start'] += ':30'
    elif laststart == qso['start'] + ':30': # 4th QSO in this minute
        qso['start'] += ':45'
    laststart = qso['start']
    qso['call'] = line[29:43].rstrip()
    qso['qrg'] = str(Decimal(line[79:87]) / 1000)

    rsttx = line[44:47].rstrip()
    if line[23] == '0':
        serial = line[24:27]
    else:
        serial = line[23:27]

    rstrx = line[49:52].rstrip()
    exchange = line[54:68].strip()

    # my rst:
    qso['rsttx'] = rsttx
    qso['extx'] = extx.replace("#", serial)

    # their rst:
    qso['rstrx'] = rstrx
    qso['exrx'] = exchange

    # extract CQ zone
    #qso['cq'] = exchange
    # extract ITU zone
    #if m := re.search('\\b([0-9]{1,2})\\b', exchange):
    #    qso['itu'] = int(m.group(1))
    #qso['itu'] = exchange

    # extract dok from exchange
    if qso['call'][0] == 'D' and (m := re.search('\\b([A-Z][0-9]{2})\\b', exchange)):
        qso['dok'] = m.group(1)

    # extract locator from exchange
    if m := re.search('([A-R]{2}[0-9]{2}(?:[A-X]{2})?)$', exchange):
        qso['loc'] = m.group(1)

    log.append(qso)

    for field in qso:
        fields.add(field)
        print(f"{field} \033[1m{qso[field]}\033[0m", end=" ")
    print()

if not noop:
    conn = psycopg.connect("service=cb")
    cur = conn.cursor()

    # empty livelog since we are loading the real log now
    cur.execute("delete from livelog")

    with cur.copy(f"copy {logtable} ({', '.join(fields)}) from stdin") as copy:
        for qso in log:
            copy.write_row([qso.get(f) for f in fields])

    conn.commit()
